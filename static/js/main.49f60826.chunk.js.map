{"version":3,"sources":["utils/api.js","actions/pokemons.js","actions/actionTypes.js","components/Pokemon.js","containers/Pokemons.js","actions/pokemon.js","containers/PokemonDetail.js","App.js","serviceWorker.js","reducers/pokemon.js","reducers/pokemons.js","reducers/index.js","store/index.js","index.js"],"names":["ROOT_ENDPOINT","process","POKE_ENDPOINT","API_ENDPOINTS","pokemons","concat","setPokemons","dispatch","type","payload","Object","objectSpread","results","map","pokemon","id","url","substring","length","Pokemon","_ref","name","react_default","a","createElement","router_es","to","className","src","alt","Pokemons","this","props","getPokemons","components_Pokemon","assign","key","Component","mapDispatchToProps","pokemonsList","window","localStorage","getItem","JSON","parse","fetch","then","resp","json","setItem","stringify","catch","error","setPokemonsError","connect","setPokemon","PokemonDetail","getPokemon","pokemonid","sprites","front_default","types","sort","pokeType1","pokeType2","slot","pokeType","stats","reverse","pokeStat","stat","base_stat","height","weight","savedPokemon","fetchPokemon","setPokemonError","App","containers_Pokemons","path","containers_PokemonDetail","Boolean","location","hostname","match","initialState","state","arguments","undefined","action","rootReducer","combineReducers","middleware","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","apply","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.49f60826.chunk.js","sourcesContent":["const ROOT_ENDPOINT = process.env.POKE_ENDPOINT || 'https://pokeapi-215911.firebaseapp.com/api/v2/';\n\nconst API_ENDPOINTS = {\n    pokemons: `${ROOT_ENDPOINT}pokemon/`,\n};\n\nexport const fetchPokemons = () =>\n    fetch(API_ENDPOINTS.pokemons).then(resp => resp.json());\n\nexport const fetchPokemon = id =>\n    fetch(`${API_ENDPOINTS.pokemons}${id}/`).then(resp => resp.json());","import { fetchPokemons } from '../utils/api';\nimport {\n    SET_POKEMONS,\n    SET_POKEMONS_ERROR,\n} from './actionTypes';\n\nconst setPokemons = (dispatch, pokemons) => {\n    const pokemonsWithId = {\n        ...pokemons,\n        results: pokemons.results.map(pokemon => ({\n            ...pokemon,\n            id: pokemon.url.substring(34, pokemon.url.length - 1)\n        }))\n    };\n\n    dispatch({\n        type: SET_POKEMONS,\n        payload: pokemonsWithId,\n    });\n};\n\nconst setPokemonsError = (dispatch, error) => {\n    dispatch({\n        type: SET_POKEMONS_ERROR,\n        payload: error,\n    });\n};\n\n\nexport const getPokemons = () =>\n    (dispatch) => {\n        const pokemonsList = window.localStorage.getItem('pokemons'); \n        if (pokemonsList) {\n            setPokemons(dispatch, JSON.parse(pokemonsList));\n        } else {\n            fetchPokemons()\n                .then((pokemons) => {\n                    window.localStorage.setItem('pokemons', JSON.stringify(pokemons));\n                    setPokemons(dispatch, pokemons);\n                })\n                .catch((error) => setPokemonsError(dispatch, error));\n        }\n    };","// Pokemon List\nexport const SET_POKEMONS = 'pokedev/pokemons/SET_POKEMONS';\nexport const SET_POKEMONS_ERROR = 'pokedev/pokemons/SET_POKEMONS_ERROR';\n\n// Pokemon Detail\nexport const SET_POKEMON = 'pokedev/pokemons/SET_POKEMON';\nexport const SET_POKEMON_ERROR = 'pokedev/pokemons/SET_POKEMON_ERROR';","import React from 'react';\nimport { Link } from '@reach/router';\n\nconst Pokemon = ({ id, name }) => (\n    <Link to={`pokemon/${id}`}>\n        <div className=\"pokemon\">\n            <figure>\n                <img\n                    src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`}\n                    alt={name}\n                />\n            </figure>\n            <h3>{name}</h3>\n        </div>\n    </Link>\n);\n\nexport default Pokemon;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getPokemons } from '../actions/pokemons';\nimport Pokemon from '../components/Pokemon';\n\nclass Pokemons extends Component {\n    componentDidMount() {\n        this.props.getPokemons();\n    }\n\n    render() {\n        return (\n            <div className=\"pokemons\">\n                {(this.props.pokemons.results || []).map((pokemon) => (\n                    <Pokemon key={pokemon.name} {...pokemon} />\n                ))}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({ pokemons }) => ({\n    pokemons: pokemons.results,\n});\n\nconst mapDispatchToProps = {\n    getPokemons,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Pokemons);\n\n","import { fetchPokemon } from '../utils/api';\nimport {\n    SET_POKEMON,\n    SET_POKEMON_ERROR,\n} from './actionTypes';\n\nconst setPokemon = (dispatch, pokemon) => {\n    dispatch({\n        type: SET_POKEMON,\n        payload: pokemon,\n    });\n};\n\nconst setPokemonError = (dispatch, error) => {\n    dispatch({\n        type: SET_POKEMON_ERROR,\n        payload: error,\n    });\n};\n\nexport const getPokemon = id =>\n    (dispatch) => {\n        const savedPokemon = window.localStorage.getItem(`pokemon-${id}`);\n        if (savedPokemon) {\n            setPokemon(dispatch, JSON.parse(savedPokemon));\n        } else {\n            fetchPokemon(id)\n                .then((pokemon) => {\n                    window.localStorage.setItem(`pokemon-${id}`, JSON.stringify(pokemon));\n                    setPokemon(dispatch, pokemon);\n                })\n                .catch(error => setPokemonError(dispatch, error));\n        }\n    };","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from '@reach/router';\nimport { getPokemon } from '../actions/pokemon';\n\nclass PokemonDetail extends Component {\n    componentDidMount() {\n        this.props.getPokemon(this.props.pokemonid);\n    }\n\n    render() {\n        const { pokemon } = this.props;\n        return (\n            <div>\n                <Link to=\"/\">Home</Link>\n                <h3>{pokemon.name}</h3>\n                <div className=\"pokemon-detail\">\n                    <div className=\"pokemon-image\">\n                        <figure>\n                            <img\n                                src={(pokemon.sprites || {}).front_default}\n                                alt={pokemon.name}\n                            />\n                        </figure>\n                    </div>\n                    <div className=\"pokemon-relevant-info\">\n                        <div className=\"pokemon-types\">\n                            {(pokemon.types || [])\n                                .sort((pokeType1, pokeType2) => pokeType1.slot > pokeType2.slot)\n                                .map(pokeType => (\n                                    <strong key={pokeType.type.name}>{pokeType.type.name} </strong>\n                                ))}\n                        </div>\n                        <div className=\"pokemon-stats\">\n                            {(pokemon.stats || [])\n                                .reverse()\n                                .map(pokeStat => (\n                                    <div key={pokeStat.stat.name}>\n                                        <strong>{pokeStat.stat.name}: </strong>\n                                        <span>{pokeStat.base_stat}</span>\n                                    </div>\n                                ))}\n                        </div>\n                    </div>                        \n                </div>\n                <div className=\"pokemon-profile\">\n                    <h4>Profile</h4>\n                    <p>\n                        <strong>Height: </strong>\n                        <span>{(pokemon.height / 10)} m</span>\n                    </p>\n                    <p>\n                        <strong>Weight: </strong>\n                        <span>{(pokemon.weight / 10)} kg</span>\n                    </p>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({ pokemon }) => ({\n    pokemon: pokemon.pokemon,\n});\n\nconst mapDispatchToProps = {\n    getPokemon,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PokemonDetail);","import React, { Component } from 'react';\nimport { Router } from '@reach/router';\nimport Pokemons from './containers/Pokemons';\nimport PokemonDetail from './containers/PokemonDetail';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Pokedex @ Zipdev</h1>\n        <Router>\n            <Pokemons path=\"/\" />\n            <PokemonDetail path=\"/pokemon/:pokemonid\" />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    SET_POKEMON,\n    SET_POKEMON_ERROR,\n} from '../actions/actionTypes';\n\nconst initialState = {\n    pokemon: {},\n    error: null,\n};\n\nconst pokemon = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_POKEMON:\n            return {\n                ...state, \n                pokemon: action.payload,\n            };\n        case SET_POKEMON_ERROR:\n            return {\n                ...state, \n                error: action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default pokemon;","import {\n    SET_POKEMONS,\n    SET_POKEMONS_ERROR,\n} from '../actions/actionTypes';\n\nconst initialState = {\n    results: {},\n    error: null,\n};\n\nconst pokemons = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_POKEMONS:\n            return {\n                ...state, \n                results: action.payload,\n            };\n        case SET_POKEMONS_ERROR:\n            return {\n                ...state, \n                error: action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default pokemons;","import { combineReducers } from 'redux';\nimport pokemon from './pokemon';\nimport pokemons from './pokemons';\n\nconst rootReducer = combineReducers({\n    pokemon,\n    pokemons,\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst middleware = [ thunk ];\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    reducer,\n    composeEnhancers(\n        applyMiddleware(...middleware),\n    ),\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}